.grid-container.max-column {
	display: grid !important;
	gap: $gap;
}

// .grid-item {
// 	outline: 1px solid blue;
// }

.grid-container.cluster {
	display: flex !important;
	flex-wrap: wrap;
	gap: $gap;
	// outline: 1px solid pink !important;
}

.grid-container.auto-grid {
	// --min-column-size: 20rem;
	// Sass variable from input instead
	display: grid !important;
	gap: $gap;
	grid-template-columns: repeat(auto-fit, minmax(min(#{$auto-min-column}, 100%), 1fr));
	// outline: 2px solid rebeccapurple !important;
}

.grid-container.flexible-grid {
	display: flex !important;
	flex-wrap: wrap;
	gap: $gap;
	// outline: 1px solid firebrick !important;
}

.grid-container.flexible-grid > * {
	flex: 1;
}

.grid-container.reel {
	// --gap: 1rem;
	display: grid !important;
	gap: $gap;
	grid-auto-flow: column;
	grid-auto-columns: calc(50% - (#{$gap} / 2));
	overflow-x: scroll;
	scroll-snap-type: x mandatory;
	scroll-padding: $gap;
	// outline: 1px solid orangered !important;
}

.grid-container.reel > * {
	scroll-snap-align: start;
}

@media (min-width: $bp-md) {
	.grid-container {
		grid-auto-flow: column;
	}

	@for $i from 1 through $max-column-count-md {
		.grid-container.max-column > .grid-item:nth-child(#{$max-column-count-md}n + #{$i}) {
			grid-column: $i;
		}
	}
}

@media (min-width: $bp-lg) {
	@for $f from 1 through $max-column-count-lg {
		.grid-container.max-column > .grid-item:nth-child(#{$max-column-count-lg}n + #{$f}) {
			grid-column: $f;
		}
	}
}
